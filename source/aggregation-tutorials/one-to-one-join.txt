.. _node-aggregation-one-to-one:

===============
One-to-One Join
===============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: code example, node.js, lookup, aggregation

Introduction
------------

In this tutorial, you will learn how to perform a one-to-one join using
aggregation with the {+driver-long+}. A one-to-one join occurs when a document
in one collection has a field value that matches to a single document with the
same field value in another collection. The two documents with matching fields
are then combined into one document.

.. tip::

   A one-to-one join does not require the entities to have a :wikipedia:`One-to-one relationship
   </One-to-one_(data_model)>`.

The goal of this aggregation tutorial is to list all orders
made in 2020, with the product information associated with each order.

This example uses two collections:

- ``products`` which contains documents detailing a shop's available products.
- ``orders`` which contains documents describing an individual order for a product at that shop.

Because an order can be for only one product, the aggregation uses a
one-to-one join to match an order document to the document for the ordered
product. The collections are joined using a field called ``product_id`` that exists in
the documents in both collections.

The examples and sample data in this tutorial are sourced from the `Practical MongoDB
Aggregations Book <https://www.practical-mongodb-aggregations.com/>`__.

Before You Get Started
----------------------

Before you get started with this tutorial, you will need a Node.js application
with the {+driver-long+} installed that connects to a MongoDB deployment.

To learn how to create a MongoDB deployment on MongoDB Atlas, or
on a local MongoDB instance, see the :ref:`Connection Guide <node-connect-to-mongodb>`.

To learn how to get started using MongoDB with a new Node.js project, see the
:ref:`node-quickstart`.

This tutorial uses sample data stored in two separate collections. Insert the
following sample data into a collection called
``products``:

.. literalinclude:: /includes/aggregation/one-to-one-join.js
   :language: javascript
   :copyable: true
   :start-after: // start-products
   :end-before: // end-products
   :dedent:

Insert the following data into a collection called ``orders``:

.. literalinclude:: /includes/aggregation/one-to-one-join.js
   :language: javascript
   :copyable: true
   :start-after: // start-orders
   :end-before: // end-orders
   :dedent:

For more information about inserting documents into a collection, see :ref:`node-fundamentals-insert-data`.

One-to-One Join Tutorial
------------------------

.. procedure::
   :style: normal

   .. step:: Build The Aggregation Pipeline

      .. procedure::
         :style: connected

         .. step::

            First, create a ``pipeline`` variable and add a :manual:`$match
            </reference/operator/aggregation/match>` stage that matches orders made in 2020.

            .. literalinclude:: /includes/aggregation/one-to-one-join.js
               :language: javascript
               :copyable: true
               :start-after: // start-match
               :end-before: // end-match
               :dedent:

         .. step::

            The next stage in the pipeline is a :manual:`$lookup
            </reference/operator/aggregation/lookup>` stage. The
            ``$lookup`` stage joins the ``product_id`` field in the ``orders``
            collection, to the ``id`` field in the ``products`` collection.

            .. literalinclude:: /includes/aggregation/one-to-one-join.js
               :language: javascript
               :copyable: true
               :start-after: // start-lookup
               :end-before: // end-lookup
               :dedent:

         .. step::

            Next, add two :manual:`$set </reference/operator/aggregation/set>`
            stages to the pipeline. The first ``$set`` stage,
            sets the ``product_mapping`` field to the first element in the
            ``product_mapping`` object created in the previous ``$lookup``
            stage. 

            The second ``$set`` stage creates a new ``product_name`` and
            ``product_category`` field from the values in the
            ``product_mapping`` object.

            .. literalinclude:: /includes/aggregation/one-to-one-join.js
               :language: javascript
               :copyable: true
               :start-after: // start-set
               :end-before: // end-set
               :dedent:

            .. tip::

               Because this is a one-to-one join, the ``$lookup`` stage
               adds only one array element to the input document. The pipeline
               uses the :manual:`$first </reference/operator/aggregation/first>`
               operator to retrieve the data from this element.

         .. step::

            The final stage in the pipeline is an :manual:`$unset
            </reference/operator/aggregation/unset>` stage. The
            ``$unset`` stage removes unnecessary fields from the document.
            Add the ``$unset`` stage as shown in the following example:
            
            .. literalinclude:: /includes/aggregation/one-to-one-join.js
               :language: javascript
               :copyable: true
               :start-after: // start-unset
               :end-before: // end-unset
               :dedent:

   .. step:: Run the Aggregation Pipeline

      The following code runs the aggregation pipeline and prints the results to
      the console.

      .. literalinclude:: /includes/aggregation/one-to-one-join.js
         :language: javascript
         :copyable: true
         :start-after: // start-run-aggregation
         :end-before: // end-run-aggregation
         :dedent:

      Running the full application prints three documents. The documents
      represent customer orders that occurred in 2020, with the ``product_name`` and
      ``product_category`` of the ordered product.

      .. code-block:: sh
         :copyable: false
         
         {
           customer_id: 'elise_smith@myemail.com',
           orderdate: 2020-05-30T08:35:52.000Z,
           value: 431.43,
           product_name: 'Asus Laptop',
           product_category: 'ELECTRONICS'
         }
         {
           customer_id: 'oranieri@warmmail.com',
           orderdate: 2020-01-01T08:25:37.000Z,
           value: 63.13,
           product_name: 'Morphy Richardds Food Mixer',
           product_category: 'KITCHENWARE'
         }
         {
           customer_id: 'jjones@tepidmail.com',
           orderdate: 2020-12-26T08:55:46.000Z,
           value: 429.65,
           product_name: 'Asus Laptop',
           product_category: 'ELECTRONICS'
         }

      The result consists of joined documents containing fields from the
      ``orders`` collection and fields from the ``products`` collection, joined
      by matching the ``product_id`` field present in each original document.

To see the complete code for the application made in this tutorial, see the
`Complete Node.js Tutorial <https://github.com/mongodb/docs-node/tree/master/source/includes/aggregation/one-to-one-join.js>`__.
